name: Autonomous Dependency Updater for yt-dlp

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clone yt-dlp Repository
        run: git clone https://github.com/yt-dlp/yt-dlp.git

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- This is Your New "Reconciliation" Phase ---
      - name: Reconcile Golden Record with pyproject.toml
        run: |
          echo "Phase 1: Reconciling requirements.txt with the project's source of truth..."
          
          # 1. Install the necessary tools for this phase
          python -m pip install pip-tools toml

          # 2. Generate the "Ideal Future State" from pyproject.toml
          # This represents the most up-to-date, installable set of dependencies.
          python -c "
          import toml; from pathlib import Path
          project_dir = Path('./yt-dlp')
          toml_path = project_dir / 'pyproject.toml'
          data = toml.load(toml_path)
          
          build_deps = data.get('build-system', {}).get('requires', [])
          default_deps = data.get('project', {}).get('optional-dependencies', {}).get('default', [])
          test_deps = data.get('project', {}).get('optional-dependencies', {}).get('test', [])
          
          # We include yt-dlp itself to get its core dependencies resolved.
          all_deps_for_resolver = ['yt-dlp'] + build_deps + default_deps + test_deps
          
          with open('requirements.in', 'w') as f:
              for dep in all_deps_for_resolver:
                  f.write(f'{dep}\n')
          "
          pip-compile --resolver=backtracking --output-file temp-ideal-state.txt requirements.in
          echo "--- Ideal State generated in temp-ideal-state.txt ---"

          # 3. Run your new, smart reconciliation script.
          # This will intelligently update our Golden Record (requirements.txt).
          python reconcile.py
          echo "--- Reconciliation with requirements.txt complete ---"

      # --- End of the new phase ---

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          # The pip cache is based on our stable, committed Golden Record.
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install agent dependencies
        run: pip install google-generativeai pypi-simple packaging

      - name: Run the Autonomous Agent (The Refiner)
        # The agent now receives a perfectly prepared requirements.txt file.
        run: python dependency_agent.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'AURA Dependency Agent'
          git config --global user.email 'aura-agent@users.noreply.github.com'
          
          # The agent's final output is the new Golden Record.
          TARGET_FILE="requirements.txt"
          
          git add $TARGET_FILE
          if git diff-index --quiet HEAD; then
            echo "No changes to the Golden Record to commit."
            exit 0
          fi
          
          echo "The Golden Record (requirements.txt) has been updated. Committing..."
          git commit -m "chore(deps): Autonomously update Golden Record for yt-dlp [skip ci]"
          git push