name: Autonomous Dependency Updater for yt-dlp

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 */3 * *'

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout Experiment Repository
        uses: actions/checkout@v4

      - name: Clone yt-dlp Repository
        run: git clone https://github.com/yt-dlp/yt-dlp.git

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # --- This section is DIFFERENT and REQUIRED for yt-dlp ---
      - name: Install CI Tools for Dependency Generation
        run: python -m pip install pip-tools toml

      - name: Generate requirements.txt from pyproject.toml
        run: |
          echo "Dynamically discovering all dependencies for yt-dlp..."
          python -c "
          import toml; from pathlib import Path
          project_dir = Path('./yt-dlp')
          toml_path = project_dir / 'pyproject.toml'
          data = toml.load(toml_path)
          
          # We need the build, default (runtime), and test dependencies
          build_deps = data.get('build-system', {}).get('requires', [])
          default_deps = data.get('project', {}).get('optional-dependencies', {}).get('default', [])
          test_deps = data.get('project', {}).get('optional-dependencies', {}).get('test', [])

          # We are NOT using an editable install here, as we are in the 'User Loop'.
          all_deps = ['yt-dlp'] + build_deps + default_deps + test_deps

          with open('requirements.in', 'w') as f:
              for dep in all_deps: f.write(f'{dep}\n')
          "
          pip-compile --resolver=backtracking --output-file generated-requirements.txt requirements.in

      # --- The rest of the workflow follows the new, robust pattern ---
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('generated-requirements.txt') }}

      - name: Install agent dependencies
        run: pip install google-generativeai pypi-simple packaging

      - name: Run the Autonomous Agent
        run: python dependency_agent.py
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      
      - name: Commit and push changes if any
        run: |
          git config --global user.name 'AURA Dependency Agent'
          git config --global user.email 'aura-agent@users.noreply.github.com'
          
          TARGET_FILE="generated-requirements.txt"
          git add $TARGET_FILE
          if git diff-index --quiet HEAD; then
            echo "No dependency changes to commit."
            exit 0
          fi
          
          echo "Dependencies have changed. Committing and pushing..."
          git commit -m "chore(deps): Autonomously manage yt-dlp dependencies [skip ci]"
          git push